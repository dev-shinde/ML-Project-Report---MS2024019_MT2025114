Top parameter sets:
--> Testing Acc: 0.91404 => 1: 0.9089 
    params={
        'subsample': 0.8,
        'reg_lambda': 3.07, 
        'reg_alpha': np.float64(0.738), 
        'n_estimators': 352, 
        'min_child_weight': 4.5, 
        'max_depth': 3, 
        'learning_rate': np.float64(0.1805), 
        'gamma': np.float64(0.5025), 
        'colsample_bytree': 0.6, 
    } final 14
--> Testing Acc: 0.91404 => 4: 0.9087 
    params={
        'colsample_bytree': 0.6, 
        'gamma': np.float64(0.5025), 
        'learning_rate': np.float64(0.1805), 
        'max_depth': 3, 
        'min_child_weight': 4.5, 
        'n_estimators': 349, '
        reg_alpha': np.float64(0.738), 
        'reg_lambda': 3.07, 
        'subsample': 0.8
    } final 14
--> Testing Acc: 0.91404 => 8: 0.9082 
    params={
        'subsample': 0.8,
        'reg_lambda': 2.97, 
        'reg_alpha': 0.72, 
        'n_estimators': 349, 
        'min_child_weight': 4.4, 
        'max_depth': 3, 
        'learning_rate': np.float64(0.17750000000000002), 
        'gamma': 0.49, 
        'colsample_bytree': 0.6, 
    } final13

--> Testing Acc: 0.91349 =>  9: 0.9083
    params={
        'subsample': 0.8,
        'reg_lambda': 2.97, 
        'reg_alpha': 0.72, 
        'n_estimators': 347, 
        'min_child_weight': 4.4, 
        'max_depth': 3, 
        'learning_rate': np.float64(0.17750000000000002), 
        'gamma': 0.49, 
        'colsample_bytree': 0.6, 
    } final13

--> Testing Acc: 0.91349 => 1: 0.9086 
    params={    
        'subsample': 0.8,
        'reg_lambda': 3.05, 
        'reg_alpha': 0.73, 
        'n_estimators': 346, 
        'min_child_weight': 4.5, 
        'max_depth': 3, 
        'learning_rate': np.float64(0.18416666666666667), 
        'gamma': 0.54, 
        'colsample_bytree': 0.6, 
    } final11 

--> Testing Acc: 0.91322 => 5: 0.9083 
    params={
        'subsample': 0.8,
        'reg_lambda': 2.95, 
        'reg_alpha': 0.7, 
        'n_estimators': 345, 
        'min_child_weight': 5, 
        'max_depth': 3, 
        'learning_rate': np.float64(0.175), 
        'gamma': 0.45, 
        'colsample_bytree': 0.6, 
    }final10
    
--> Testing Acc: 0.91294 => 4: 0.9083 
    params={
        'subsample': 0.8,
        'reg_lambda': 3.15, 
        'reg_alpha': 0.75, 
        'n_estimators': 355, 
        'min_child_weight': 4.5, 
        'max_depth': 3, 
        'learning_rate': np.float64(0.15833333333333333), 
        'gamma': 0.55, 
        'colsample_bytree': 0.6, 
    }final10
    
--> Testing Acc: 0.91267 => 4: 0.9081
    params={
        'subsample': 0.8,
        'reg_lambda': 3.1, 
        'reg_alpha': 0.7, 
        'n_estimators': 340, 
        'min_child_weight': 5, 
        'max_depth': 3, 
        'learning_rate': 0.19, 
        'gamma': 0.5, 
        'colsample_bytree': 0.6, 
    }final9

--> Testing Acc: 0.91239 => 3: 0.9082 
    params={
        'subsample': 0.8,
        'reg_lambda': 3.0, 
        'reg_alpha': 0.8, 
        'n_estimators': 340, 
        'min_child_weight': 5, 
        'max_depth': 3, 
        'learning_rate': 0.15, 
        'gamma': 0.3, 
        'colsample_bytree': 0.6, 
    } final = 8


--> Testing Acc: 0.91184 =>  54: 
    mean_test_score=0.9072, 
    params={
        'subsample': 0.8, 
        'reg_lambda': 2.5, 
        'reg_alpha': 0.8, 
        'n_estimators': np.int64(400), 
        'min_child_weight': 5, 
        'max_depth': 3, 
        'learning_rate': np.float64(0.1366666666666667), 
        'gamma': np.float64(0.4), 
        'colsample_bytree': 0.6
        } final = 7


--> Testing Acc: 0.91101 =>  43: 
    mean_test_score=0.9068, 
    params={
        'subsample': 0.8, 
        'reg_lambda': 2, 
        'reg_alpha': 0.4, 
        'n_estimators': np.int64(300), 
        'min_child_weight': 5, 
        'max_depth': 7, 
        'learning_rate': np.float64(0.03111111111111111), 
        'gamma': np.float64(0.2), 
        'colsample_bytree': 0.6
        }    
--> Testing Acc: 0.91019 =>  1: 
    mean_test_score=0.9072, 
    params={
        'subsample': 0.8, 
        'reg_lambda': 2, 
        'reg_alpha': 0.5, 
        'n_estimators': np.int64(450), 
        'min_child_weight': 3, 
        'max_depth': 3, 
        'learning_rate': np.float64(0.1577777777777778), 
        'gamma': np.float64(0.4), 
        'colsample_bytree': 0.8
        }


--> Testing Acc: 0.90826 =>  2: 
    mean_test_score=0.9067, 
    params={
        'subsample': 0.8, 
        'reg_lambda': 1.5, 
        'reg_alpha': 0.4, 
        'n_estimators': np.int64(400), 
        'min_child_weight': 3, 
        'max_depth': 3, 
        'learning_rate': np.float64(0.2), 
        'gamma': np.float64(0.1), 
        'colsample_bytree': 0.6
        }

--> Testing Acc: 0.90909 =>  40: 
    mean_test_score=0.9070, 
    params={
        'subsample': 0.8, 
        'reg_lambda': 2.5, 
        'reg_alpha': 0.6, 
        'n_estimators': np.int64(500), 
        'min_child_weight': 5, 
        'max_depth': 7, 
        'learning_rate': np.float64(0.052222222222222225), 
        'gamma': np.float64(0.2), 
        'colsample_bytree': 0.6
        }

https://www.kaggle.com/competitions/ait-511-course-project-1-obesity-risk/submissions