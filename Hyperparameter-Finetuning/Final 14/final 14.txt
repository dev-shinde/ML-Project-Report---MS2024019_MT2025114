
Top 10 parameter sets:
0.91404 => 1: 0.9089 => params={'colsample_bytree': 0.6, 'gamma': np.float64(0.5025), 'learning_rate': np.float64(0.1805), 'max_depth': 3, 'min_child_weight': 4.5, 'n_estimators': 352, 'reg_alpha': np.float64(0.738), 'reg_lambda': 3.07, 'subsample': 0.8}
2: 0.9088 => params={'colsample_bytree': 0.6, 'gamma': np.float64(0.49), 'learning_rate': np.float64(0.1775), 'max_depth': 3, 'min_child_weight': 4.5, 'n_estimators': 352, 'reg_alpha': np.float64(0.715), 'reg_lambda': 3.07, 'subsample': 0.8}
3: 0.9088 => params={'colsample_bytree': 0.6, 'gamma': np.float64(0.49), 'learning_rate': np.float64(0.1775), 'max_depth': 3, 'min_child_weight': 4.5, 'n_estimators': 349, 'reg_alpha': np.float64(0.715), 'reg_lambda': 3.07, 'subsample': 0.8}
0.91404 => 4: 0.9087 => params={'colsample_bytree': 0.6, 'gamma': np.float64(0.5025), 'learning_rate': np.float64(0.1805), 'max_depth': 3, 'min_child_weight': 4.5, 'n_estimators': 349, 'reg_alpha': np.float64(0.738), 'reg_lambda': 3.07, 'subsample': 0.8}
5: 0.9085 => params={'colsample_bytree': 0.6, 'gamma': np.float64(0.49), 'learning_rate': np.float64(0.1805), 'max_depth': 3, 'min_child_weight': 4.5, 'n_estimators': 349, 'reg_alpha': np.float64(0.738), 'reg_lambda': 3.07, 'subsample': 0.8}
6: 0.9085 => params={'colsample_bytree': 0.6, 'gamma': np.float64(0.49), 'learning_rate': np.float64(0.1805), 'max_depth': 3, 'min_child_weight': 4.5, 'n_estimators': 352, 'reg_alpha': np.float64(0.738), 'reg_lambda': 3.07, 'subsample': 0.8}
7: 0.9085 => params={'colsample_bytree': 0.6, 'gamma': np.float64(0.515), 'learning_rate': np.float64(0.1775), 'max_depth': 3, 'min_child_weight': 4.5, 'n_estimators': 352, 'reg_alpha': np.float64(0.738), 'reg_lambda': 3.07, 'subsample': 0.8}
8: 0.9083 => params={'colsample_bytree': 0.6, 'gamma': np.float64(0.49), 'learning_rate': np.float64(0.17600000000000002), 'max_depth': 3, 'min_child_weight': 4.5, 'n_estimators': 352, 'reg_alpha': np.float64(0.715), 'reg_lambda': 3.07, 'subsample': 0.8}
9: 0.9083 => params={'colsample_bytree': 0.6, 'gamma': np.float64(0.515), 'learning_rate': np.float64(0.17450000000000002), 'max_depth': 3, 'min_child_weight': 4.5, 'n_estimators': 352, 'reg_alpha': np.float64(0.738), 'reg_lambda': 3.07, 'subsample': 0.8}
10: 0.9083 => params={'colsample_bytree': 0.6, 'gamma': np.float64(0.49), 'learning_rate': np.float64(0.1805), 'max_depth': 3, 'min_child_weight': 4.5, 'n_estimators': 352, 'reg_alpha': np.float64(0.715), 'reg_lambda': 3.07, 'subsample': 0.8}